<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace : xml파일은 여러개일 수 있음. 
이를 구별하기 위한 식별 용도로 사용 -->
<mapper namespace="product">
	<!-- MyBatis에서 제공해주는 데이터 입력을 나타내는 태그
	1) 드루와 : Dao 객체가 던진 데이터타입.parameterType만 씀
	2) 가즈아 : Dao 객체의 메소드 쪽으로 리턴할 타입.
	  - resultType : vo, hashMap, String, int
	  - resultMap  : MyBatis의 resultMap 태그를 사용
	-->
	<!-- 
	productVO => 
	{"productId":"P1234","pname":"iPhone 6s","unitPrice":800000,"description":"4.7-inch, 1334x750"
	,"manufacturer":"Apple",
	//"category":"Smart Phone","unitsInStock":1000,"condition":"New","productImage":""}
	insert/update/delete 태그는 resultType을 생략할 수 있음
	-->
	<insert id="insert" parameterType="productVO">
		INSERT INTO PRODUCT(PRODUCT_ID,PNAME,UNIT_PRICE,DESCRIPTION,MANUFACTURER,CATEGORY,
		UNITS_IN_STOCK,CONDITION,FILENAME,QUANTITY)
		VALUES(#{productId},#{pname},#{unitPrice},#{description},
		#{manufacturer},#{category},#{unitsInStock},#{condition},#{filename},0)
	</insert>
	
	<!-- 책 목록 
	드루와 : null
	가즈아 : ProductVO 타입
	-->
	<select id="list" resultType="productVO">
		SELECT PRODUCT_ID,PNAME,UNIT_PRICE,DESCRIPTION,MANUFACTURER,
		CATEGORY,UNITS_IN_STOCK,CONDITION
		,SUBSTR(FILENAME,0,INSTR(FILENAME,'/',-1)) || 's_' || SUBSTR(FILENAME,INSTR(FILENAME,'/',-1)+1) FILENAME
		,QUANTITY
		FROM   PRODUCT
		ORDER BY PRODUCT_ID DESC
	</select>
	
	<!-- 책 상세
	드루와 : String 타입( productId=P1234 )
	가즈아 : ProductVO 타입
	 -->
	<select id="detail" parameterType="String" resultType="productVO">
		SELECT PRODUCT_ID,PNAME,UNIT_PRICE,DESCRIPTION,MANUFACTURER,
		CATEGORY,UNITS_IN_STOCK,CONDITION,FILENAME,QUANTITY
		FROM   PRODUCT
		WHERE  PRODUCT_ID = #{productId}
	</select>
	
</mapper>










